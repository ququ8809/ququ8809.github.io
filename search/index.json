[{"content":"​\t单例有两种模式，一种是饿汉模式，另一种是懒汉模式\n饿汉模式 饿汉模式，在调用之前初始化，所以一般在init中初始化。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 type singleton struct { count int } var Instance = new(singleton) func (s *singleton) Add() int { s.count++ return s.count } func main() { //使用，go一般使用饿汉模式 fmt.Println(Instance.Add()) } 懒汉模式 懒汉模式，首次调用的时候初始化，使用懒加载的方式初始化。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 type singleton02 struct { count int } var ( instance *singleton02 mutext sync.Mutex ) func New() *singleton02 { if instance == nil { //需要加锁，保证线程安全 mutext.Lock() if instance == nil { instance = new(singleton02) } mutext.Unlock() } return instance } func (s *singleton02) Add() int { s.count++ return s.count } func main() { //使用的时候创建 c2 := New() fmt.Println(c2.Add()) } ","date":"2023-03-20T00:00:00Z","permalink":"https://ququ8809.github.io/p/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/","title":"单例模式"},{"content":"案例1 1 2 3 4 5 6 7 8 9 10 11 12 const ( x = iota _ y z = \u0026#34;zz\u0026#34; k p = iota ) func main() { fmt.Println(\u0026#34;枚举\u0026#34;, x, y, z, k, p) //输出： 枚举 0 2 zz zz 5 } 这里要注意两个地方\niota可以理解为const的行索引或行下标，下标从0开始。 如果某一行没赋值，默认是跟上一行的表达式一样。 案例2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 const ( //这个要注意 0左移一位是1 A1 = 1 \u0026lt;\u0026lt; iota B1 C1 D1 E1 = iota * iota F1 G1 ) func main() { fmt.Println(\u0026#34;A1:\u0026#34;, A1, \u0026#34;B1:\u0026#34;, B1, \u0026#34;C1:\u0026#34;, C1, \u0026#34;D1:\u0026#34;, D1, \u0026#34;E1:\u0026#34;, E1) // A1: 1 B1: 2 C1: 4 D1: 8 E1: 16 } 这里需要注意一个地方\n1 \u0026lt;\u0026lt; iota 相当于 1 \u0026lt;\u0026lt; 0 ，0左移一位是1 案例3 1 2 3 4 5 6 7 8 9 10 const ( a bool = true b = iota c = iota d ) func main() { fmt.Println(\u0026#34;a--:\u0026#34;, a, \u0026#34;b:\u0026#34;, b, \u0026#34;c:\u0026#34;, c, \u0026#34;d:\u0026#34;, d) //a--: 1 b: 1 c: 2 d: 3 } 这里需要注意一个地方\nb的值是1，iota出现在第二行，对应的行下标是1，所以值是1。 ","date":"2023-03-20T00:00:00Z","permalink":"https://ququ8809.github.io/p/%E5%85%B3%E9%94%AE%E5%AD%97iota/","title":"关键字iota"},{"content":"defer延迟函数,在函数或方法执行完成的最后调用，defer函数可以有多个。defer函数执行过程可以分两部分，多个defer函数先按照先后顺序入栈，最后执行的时候从栈中取出执行，多个defer的执行顺序是先入后出的。\n案例1 1 2 3 4 5 6 7 8 9 10 11 12 13 func f1() int { var i int defer func() { i++ }() return i } func main() { fmt.Println(f1()) //执行结果 0 } 匿名返回值的时候，执行 return i的时候会重新创建一个局部变量，用来给返回值赋值，类似 result:=i ,这个result就是最终的返回值，因为defer是在return后面执行，所以在defer里面的i++是在赋值之后的语句，不会影响返回值。\n案例2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func f2() (r int) { defer func() { r++ }() return r } func main() { fmt.Println(f2()) //执行结果 1 } 返回值不是匿名的，不需要赋值。所以defer里面修改值会影响到最终的返回值。\n案例3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func f3() (r int) { defer func(a int) { fmt.Println(\u0026#34;r:\u0026#34;, r) r *= a fmt.Println(\u0026#34;a:\u0026#34;, a) }(r) return 2 } func main() { fmt.Println(f2()) //执行结果 r: 2 a: 0 0 } 执行步骤\ndefer先入栈，defer函数带有参数，入栈的时候入参的值也会一起带入，r还没赋值，所以是零值0，defer的入参是0。 执行 return 2,给r赋值2。 defer出栈，执行defer函数体，r *= a ,给r赋值0。所以最终结果是0。 ","date":"2022-12-20T00:00:00Z","permalink":"https://ququ8809.github.io/p/%E5%85%B3%E9%94%AE%E5%AD%97defer/","title":"关键字defer"},{"content":"进程，线程，协程的出现是有时间先后顺序的，主要都是为了不断提高cpu的使用率。\n进程 进程是一个应用程序在一个数据集上的一次动态执行过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序的运行载体。 有五种状态 创建态，就绪态，阻塞态，执行态，终止态。 进程一般是由应用程序，数据集合，进程控制快三部分组成。 进程是操作系统分配资源的最小单元。 线程 因为进程开销大，主要体现在占用内存开销大，切换时间开销大。所以出现了线程。\n线程是程序执行的最小单元，也是cpu调度和分派的基本单元。进程是作为管理线程来使用。 一个进程有一个或者多个线程，各个线程之间共享程序的内存空间(也就是进程的内存空间)。 线程也有五态。其生命周期是 创建：一个新的线程被创建，等待该线程被调用执行 就绪：时间片已用完，此线程被强制暂停，等待下一次属于它的时间片到来 运行：此线程正在执行，正在占用时间片 阻塞：也叫等待状态，等待某一事件(如IO或者另一个程序)执行完。 退出：一个线程完成任务或者其他终止条件发生，该线程终止进入退出状态，退出状态释放该线程所分配的资源。 协程 线程之间切换还是有cpu时间消耗，但是线程是cpu调度的基本单元。没法改变，所以只能尽量减少线程的切换次数。这就出现了协程。\n把多线程的程序改为多协程的程序(只有一个主线程)，这样就减少了消耗，当然也还是有多线编程，比如多核处理器机器，可以一个核对应一个线程。 一个线程可以有多个协程。 协程是由程序员自己写程序来控制的，协程调度中心是程序员自己写的(当然都是引用的第三库或者官方库)，非操作系统控制。 协程多了一个协程调度中心，也有时间片的功能，会在不同协程之间来回切换，是一种用户态的上下文切换技术。 具有欺骗cpu的作用，使用了协程的线程每次都能使用cpu最大时间片。因为就算是某一个协程在执行IO操作，协程调度中心会切换到另外的协程继续执行，这样这个线程在cpu看来就是一直在运行态，没有阻塞。 协程的切换是非抢占式的，相对于线程的抢占式切换来说。线程是当前分配的时间片用完了，必须强制切换到其他的线程，由操作系统控制。 ","date":"2022-12-20T00:00:00Z","image":"https://ququ8809.github.io/p/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%85%B3%E7%B3%BB/01_hu5438825b9b6d1014226d20d231e650c2_182045_120x120_fill_q75_box_smart1.jpeg","permalink":"https://ququ8809.github.io/p/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%85%B3%E7%B3%BB/","title":"进程，线程，协程的关系"},{"content":"channel注意事项 在取值之前，如果管道关闭，可以一直取值不会报错，但是如果缓存区空了，会取到对应类型的零值。可以通过ok语句判断，值是否是缓冲区的还是零值。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 func main() { ch := make(chan int, 2) ch \u0026lt;- 2 ch \u0026lt;- 0 close(ch) if v, ok := \u0026lt;-ch; ok { fmt.Println(\u0026#34;管道值:\u0026#34;, v) } if v, ok := \u0026lt;-ch; ok { fmt.Println(\u0026#34;管道值:\u0026#34;, v) } if v, ok := \u0026lt;-ch; ok { fmt.Println(\u0026#34;管道值:\u0026#34;, v) } //打印结果 //管道值: 2 //管道值: 0 } 或者也可以通过for语句取值，会把缓存区的值全部取出来，不需要ok判断。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 func main() { ch := make(chan int, 2) ch \u0026lt;- 2 ch \u0026lt;- 0 close(ch) for v := range ch { fmt.Println(\u0026#34;通过range取值管道:\u0026#34;, v) } //打印结果 //通过range取值管道: 2 //通过range取值管道: 0 } 管道关闭后，不能再对其发送值，否则会panic1\n1 2 3 4 5 6 7 8 func main() { ch03 := make(chan int, 1) ch03 \u0026lt;- 3 close(ch03) ch03 \u0026lt;- 5 //报错 //panic: send on closed channel } 管道没关闭，缓冲区如果满了，就不能再给管道发送值，否则会报错。必须取值后，再发送。\n1 2 3 4 5 6 7 8 func main() { ch04 := make(chan int, 2) ch04 \u0026lt;- 3 ch04 \u0026lt;- 4 ch04 \u0026lt;- 5 //报错 //fatal error: all goroutines are asleep - deadlock! } 管道没关闭，缓存区里面如果为空，就不能取值了，否则会报错。\n1 2 3 4 5 6 7 8 9 10 func main() { ch02 := make(chan int, 2) ch02 \u0026lt;- 2 ch02 \u0026lt;- 0 fmt.Println(\u0026#34;管道02\u0026#34;, \u0026lt;-ch02) fmt.Println(\u0026#34;管道02\u0026#34;, \u0026lt;-ch02) fmt.Println(\u0026#34;管道02\u0026#34;, \u0026lt;-ch02) //报错 //fatal error: all goroutines are asleep - deadlock! } ","date":"2022-12-01T00:00:00Z","permalink":"https://ququ8809.github.io/p/channel%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"channel的使用"},{"content":"正则表达式，如果是匹配多次，第一次匹配到了，第二次匹配的时候是从剩下的字符从新开始匹配。\n通配符 通配符 . 可以匹配任何除换行符以外的字符，有且只能匹配一个字符，不能多也不能少。\n1 2 3 4 5 import re ret = re.findall(\u0026#34;.\u0026#34;, \u0026#34;a,b,c,d,e\u0026#34;) # 结果 # [\u0026#39;a\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;e\u0026#39;] 全部都匹配到了，返回结果是一个数组\n1 2 3 4 5 import re ret = re.findall(\u0026#34;a.b\u0026#34;, \u0026#34;a,b,c,d,e,ab,abb,a\\tb,a\\nb\u0026#34;) # 结果 # [\u0026#39;a,b\u0026#39;, \u0026#39;abb\u0026#39;, \u0026#39;a\\tb\u0026#39;] 匹配到了三个结果\n字符集 字符集[]多选一的意思，表示匹配[]里面的其中一个，也是有且只能匹配一个字符，不能多，也不能少。\n1 2 3 4 5 6 import re ret = re.findall(\u0026#34;[ace]\u0026#34;, \u0026#34;a,b,c,d,e\u0026#34;) # 结果 # [\u0026#39;a\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;e\u0026#39;] 匹配到了三个结果。第一次从字符集里面取出a匹配一遍，看有哪些是符号条件的，第二次从字符集里面取出c匹配，等所以字符集里面的字符都匹配一遍，把结果合并。\n1 2 3 4 import re ret = re.findall(\u0026#34;a[bce]f\u0026#34;, \u0026#34;af,abf,abbf,acef,aef,abf\u0026#34;) # 结果 # [\u0026#39;abf\u0026#39;, \u0026#39;aef\u0026#39;, \u0026#39;abf\u0026#39;] 匹配到了三个结果，第一次用abf匹配，找到所有结果。第二次匹配的字符串是截取后的，类似于split函数把字符串通过abf分段，然后再用acf去匹配每一段。\n1 2 3 4 import re ret = re.findall(\u0026#34;[0123456789]\u0026#34;, \u0026#34;a,b,2,d,c,8,B,C,F\u0026#34;) # 结果 # [\u0026#39;2\u0026#39;, \u0026#39;8\u0026#39;] 匹配所有的数字，要注意字符集[]每次只能取一个字符用来匹配。[0123456789]写起来有些麻烦，可以用[0-9]简写，还可以用 \\d简写表示，都表示一个意思，匹配所有的数字。\n1 2 3 4 import re ret = re.findall(\u0026#34;[0-9a-zA-Z]\u0026#34;, \u0026#34;a,b,2,d,c,8,B,C,F\u0026#34;) # 结果 # [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;F\u0026#39;] 匹配所有的数字和大小写字母，[0-9a-zA-Z]一般也可以简写成\\w ，\\w表示匹配所有的大小写字母和数字和下划线_。\n重复元字符 重复相关的元字符 *,+,?,{}是用来修饰字符集或者通配符的，默认都是贪婪匹配的，贪婪匹配每次匹配会匹配最多的符合条件的字符。\n+表示重复1-多次，结果最少要匹配成功1次\n1 2 3 4 import re ret = re.findall(r\u0026#34;\\d+\u0026#34;, \u0026#34;a,b,23355,d,6,88888888\u0026#34;) # 结果 # [\u0026#39;23355\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;88888888\u0026#39;] 如果要取消贪婪匹配，可以在重复元字符后面加 ?\n1 2 3 4 import re ret = re.findall(r\u0026#34;\\d+?\u0026#34;, \u0026#34;a,b,23355,d,6,88888888\u0026#34;) # 结果 # [\u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;8\u0026#39;] *表示重复0-多次，最少匹配成功0次，可以匹配不成功，也就是匹配的结果可以为空。\n1 2 3 4 import re ret = re.findall(r\u0026#34;\\d*\u0026#34;, \u0026#34;a,b,23355,d,6,88888888\u0026#34;) # 结果 # [\u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;23355\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;88888888\u0026#39;, \u0026#39;\u0026#39;] 可以看到结果有空的字符串。可以这么理解，当匹配字符串下标为0的a时，没匹配上，但是因为*是可以匹配0次到多次，所以这次匹配会返回一个\u0026quot;\u0026ldquo;空的字符，然后下标右移一位，继续下一次的匹配。\n{n}表示匹配固定的n个字符长度。\n1 2 3 4 import re ret = re.findall(\u0026#34;\\w{6}\u0026#34;, \u0026#34;apple,bananaq,orange,melon\u0026#34;) # 结果 # [\u0026#39;banana\u0026#39;, \u0026#39;orange\u0026#39;] 匹配六个字符长度的字符串，字符串是由字母，数字或下划线组成。也可以{m,n}表示匹配m到n次，{m,}表示至少匹配m次\n?匹配0次或者1次\n1 2 3 4 import re ret = re.findall(\u0026#34;abc?\u0026#34;, \u0026#34;abc,abcc,abe,ab\u0026#34;) # 结果 # [\u0026#39;abc\u0026#39;, \u0026#39;abc\u0026#39;, \u0026#39;ab\u0026#39;, \u0026#39;ab\u0026#39;] 注意重复元字符?修饰的是字符c。如果要取消贪婪匹配，可以在?后面再加一个?,也就是abc??。\n?的两种用法要区分开来，如果是在重复元字符后面出现，表示取消贪婪 比如 *? +? ?? 其他地方表示重复0或者1次。\n位置元字符 位置元字符有两个 ^和$用来限制字符的位置。\n^表示起始位置，必须从起始下标0开始匹配。\n1 2 3 4 import re ret = re.findall(r\u0026#34;^\\d+\u0026#34;, \u0026#34;32,banana,255,orange,454456\u0026#34;) # 结果 # [\u0026#39;32\u0026#39;] 表示匹配字符串开头的连续数字。如果不是以数字开头就匹配不到\n^还有一种用法，用在字符集[]里面，表示非\n1 2 3 4 import re ret = re.findall(\u0026#34;[^0-9]\u0026#34;, \u0026#34;a,b,2,d,c,8,B,C,F\u0026#34;) # 结果 # [\u0026#39;a\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;,\u0026#39;, \u0026#39;F\u0026#39;] 表示匹配所有非数字。\n$表示结束位置，从字符串最后面开始匹配。\n1 2 3 4 import re ret = re.findall(r\u0026#34;\\d+$\u0026#34;, \u0026#34;32,banana,255,orange,454456\u0026#34;) # 结果 # [\u0026#39;454456\u0026#39;] 表示匹配以数字结尾的字符 ，如果不是以数字结尾就匹配不到。\n其他元字符 ()模式捕获，具有提取指定数据的能力。\n1 2 3 4 import re ret = re.findall(r\u0026#34;,(\\w{5}),\u0026#34;, \u0026#34;,apple,banana,peach,orange,melon,\u0026#34;) # 结果 # [\u0026#39;apple\u0026#39;, \u0026#39;peach\u0026#39;, \u0026#39;melon\u0026#39;] 对取到的值进行过滤，只取()里面的值。\n1 2 3 4 import re ret = re.findall(r\u0026#34;,\\w{5},\u0026#34;, \u0026#34;,apple,banana,peach,orange,melon,\u0026#34;) # 结果 # [\u0026#39;,apple,\u0026#39;, \u0026#39;,peach,\u0026#39;, \u0026#39;,melon,\u0026#39;] 对比下 不加()的结果,其的头尾都是有,逗号的。如果需要取消模式捕获，可以在左括号的后面加上?:,比如 (?:\\w{5})。\n|表示或的效果\n1 2 3 4 5 import re ret = re.findall(r\u0026#34;\\w+@(?:163|qq).com\u0026#34;, \u0026#34;123dn@163.com,.....3n4n5@qq.com......nene.3nn56@gmail.com....enen\u0026#34;) # 结果 # [\u0026#39;123dn@163.com\u0026#39;, \u0026#39;3n4n5@qq.com\u0026#39;] 表示匹配所有的qq邮箱和163邮箱。|一般是跟(?:)一起使用。\n正向先行断言\n1 2 3 4 5 import re ret = re.findall(\u0026#34;\\d+(?=PM)\u0026#34;, \u0026#34;Date: 4 Aug 3PM 6\u0026#34;) # 结果 # [\u0026#39;3\u0026#39;] 表示 只匹配数字后面是PM的数字 格式(?=PM)\n负向先行断言\n1 2 3 4 5 import re ret = re.findall(\u0026#34;\\d+(?!PM)\u0026#34;, \u0026#34;Date: 4 Aug 3PM 6\u0026#34;) # 结果 # [\u0026#39;4\u0026#39;, \u0026#39;6\u0026#39;] 只匹配数字后面不是PM的数字 格式(?!PM)\n正向后行断言\n1 2 3 4 5 import re ret = re.findall(\u0026#34;(?\u0026lt;=\\$)\\d+\u0026#34;,\u0026#34;Product Code: 1064 Price: $5 ¥67\u0026#34;) # 结果 # [\u0026#39;5\u0026#39;] 匹配数字，数字需满足前面有$的数字 格式 (?\u0026lt;=\\$) 注意，如果是特殊符号记得加\\，取消其特殊含义，$,¥等都需要加\\。\n负向后行断言\n1 2 3 4 5 import re ret = re.findall(\u0026#34;(?\u0026lt;!\\$)\\d+\u0026#34;, \u0026#34;Product Code: 1064 Price: $5\u0026#34;) # 结果 # [\u0026#39;1064\u0026#39;] 匹配数字，数字需满足前面不是 $的数字。\n转义符号 转义符号 \\有两种用法\n将一些普通符号赋予特殊功能。\n\\d表示[0-9] \\D表示 [^0-9] \\w表示 [0-9a-zA-Z_] \\W表示 [^0-9a-zA-Z_] \\s表示 仅匹配空白字符 \\S表示 匹配除空白外的字符 将特殊符号(元字符)取消其特殊功能 \\* \\. \\+ \\?\n1 2 3 4 5 import re ret = re.findall(r\u0026#34;\\*\u0026#34;, \u0026#34;*** ??? ___\u0026#34;) # 结果 # [\u0026#39;*\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;*\u0026#39;] 匹配*号\n典型例子 例子1\n1 2 3 4 5 6 import re text = \u0026#34;\u0026lt;12\u0026gt; \u0026lt;xzy\u0026gt; \u0026lt;!@#$%\u0026gt; \u0026lt;1a!#e2\u0026gt; \u0026lt;\u0026gt;\u0026#34; ret = re.findall(\u0026#34;\u0026lt;.+\u0026gt;\u0026#34;, text) # 结果 # [\u0026#39;\u0026lt;12\u0026gt; \u0026lt;xzy\u0026gt; \u0026lt;!@#$%\u0026gt; \u0026lt;1a!#e2\u0026gt; \u0026lt;\u0026gt;\u0026#39;] 注意结果只有一个，返回的是一整个字符串。\n1 2 3 4 5 6 import re text = \u0026#34;\u0026lt;12\u0026gt; \u0026lt;xzy\u0026gt; \u0026lt;!@#$%\u0026gt; \u0026lt;1a!#e2\u0026gt; \u0026lt;\u0026gt;\u0026#34; ret = re.findall(\u0026#34;\u0026lt;.+?\u0026gt;\u0026#34;, text) # 结果 # [\u0026#39;\u0026lt;12\u0026gt;\u0026#39;, \u0026#39;\u0026lt;xzy\u0026gt;\u0026#39;, \u0026#39;\u0026lt;!@#$%\u0026gt;\u0026#39;, \u0026#39;\u0026lt;1a!#e2\u0026gt;\u0026#39;] 匹配到了四个结果，跟上面的例子比，加了个?，表示取消贪婪匹配。\n例子2\n1 2 3 4 5 6 7 8 9 10 11 12 import re text = \u0026#34;\u0026#34;\u0026#34; \u0026lt;1 2\u0026gt; \u0026lt;x zy\u0026gt; \u0026lt;!@#$%\u0026gt; \u0026lt;1a !#e2\u0026gt; \u0026lt;\u0026gt; \u0026#34;\u0026#34;\u0026#34; # 修饰模式 默认是re.I 意思是 .可以匹配换行符外的所有字符 ret = re.findall(\u0026#34;\u0026lt;.*?\u0026gt;\u0026#34;, text, re.I) # 结果 # [\u0026#39;\u0026lt;!@#$%\u0026gt;\u0026#39;, \u0026#39;\u0026lt;\u0026gt;\u0026#39;] 如果想要换行符 .也可以匹配到，可以设置修饰模式\n1 2 3 4 5 6 7 8 9 10 11 12 import re text = \u0026#34;\u0026#34;\u0026#34; \u0026lt;1 2\u0026gt; \u0026lt;x zy\u0026gt; \u0026lt;!@#$%\u0026gt; \u0026lt;1a !#e2\u0026gt; \u0026lt;\u0026gt; \u0026#34;\u0026#34;\u0026#34; # 修饰模式 re.S 意思是 .可以匹配所有字符，包括换行符 ret = re.findall(\u0026#34;\u0026lt;.*?\u0026gt;\u0026#34;, text, re.S) # 结果 # [\u0026#39;\u0026lt;1\\n2\u0026gt;\u0026#39;, \u0026#39;\u0026lt;x\\nzy\u0026gt;\u0026#39;, \u0026#39;\u0026lt;!@#$%\u0026gt;\u0026#39;, \u0026#39;\u0026lt;1a\\n!#e2\u0026gt;\u0026#39;, \u0026#39;\u0026lt;\u0026gt;\u0026#39;] 匹配到了五个结果，这个模式在爬虫里面比较用的到。\n","date":"2022-08-20T00:00:00Z","permalink":"https://ququ8809.github.io/p/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"正则表达式的使用"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://ququ8809.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://ququ8809.github.io/p/test-chinese/","title":"中文测试"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://ququ8809.github.io/p/markdown-%E6%96%87%E6%A1%A3%E6%94%AF%E6%8C%81/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://ququ8809.github.io/p/markdown-%E6%96%87%E6%A1%A3%E6%94%AF%E6%8C%81/","title":"Markdown 文档支持"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://ququ8809.github.io/p/%E5%AF%8C%E6%96%87%E6%9C%AC/","title":"富文本"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://ququ8809.github.io/p/placeholder%E6%96%87%E6%9C%AC/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://ququ8809.github.io/p/placeholder%E6%96%87%E6%9C%AC/","title":"Placeholder文本"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://ququ8809.github.io/p/%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/","title":"数学符号"},{"content":"去露营啦! ⛺ 很快就回来. 真开心! 😂\nEmoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://ququ8809.github.io/p/emoji-%E6%94%AF%E6%8C%81/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://ququ8809.github.io/p/emoji-%E6%94%AF%E6%8C%81/","title":"Emoji 支持"}]